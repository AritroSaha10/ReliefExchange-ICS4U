// Code generated by MockGen. DO NOT EDIT.
// Source: firestore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "github.com/golang/mock/gomock"
)

// MockFirestoreClient is a mock of FirestoreClient interface.
type MockFirestoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreClientMockRecorder
}

// MockFirestoreClientMockRecorder is the mock recorder for MockFirestoreClient.
type MockFirestoreClientMockRecorder struct {
	mock *MockFirestoreClient
}

// NewMockFirestoreClient creates a new mock instance.
func NewMockFirestoreClient(ctrl *gomock.Controller) *MockFirestoreClient {
	mock := &MockFirestoreClient{ctrl: ctrl}
	mock.recorder = &MockFirestoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirestoreClient) EXPECT() *MockFirestoreClientMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockFirestoreClient) Collection(arg0 string) *firestore.CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", arg0)
	ret0, _ := ret[0].(*firestore.CollectionRef)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockFirestoreClientMockRecorder) Collection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockFirestoreClient)(nil).Collection), arg0)
}

// MockFirestoreDocIterator is a mock of FirestoreDocIterator interface.
type MockFirestoreDocIterator struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreDocIteratorMockRecorder
}

// MockFirestoreDocIteratorMockRecorder is the mock recorder for MockFirestoreDocIterator.
type MockFirestoreDocIteratorMockRecorder struct {
	mock *MockFirestoreDocIterator
}

// NewMockFirestoreDocIterator creates a new mock instance.
func NewMockFirestoreDocIterator(ctrl *gomock.Controller) *MockFirestoreDocIterator {
	mock := &MockFirestoreDocIterator{ctrl: ctrl}
	mock.recorder = &MockFirestoreDocIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirestoreDocIterator) EXPECT() *MockFirestoreDocIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockFirestoreDocIterator) Next() (*firestore.DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*firestore.DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockFirestoreDocIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockFirestoreDocIterator)(nil).Next))
}

